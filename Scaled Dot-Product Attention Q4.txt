import numpy as np

def softmax(x):
    e_x = np.exp(x - np.max(x))  # Stability improvement
    return e_x / e_x.sum(axis=-1, keepdims=True)

def scaled_dot_product_attention(Q, K, V):
    d_k = Q.shape[-1]  # depth of the key (should be same as Q's last dim)
    
    # 1. Dot product of Q and K^T
    scores = np.dot(Q, K.T)
    
    # 2. Scale by sqrt(d_k)
    scaled_scores = scores / np.sqrt(d_k)
    
    # 3. Apply softmax
    attention_weights = softmax(scaled_scores)
    
    # 4. Multiply weights with V
    output = np.dot(attention_weights, V)
    
    return attention_weights, output

# Test Inputs
Q = np.array([[1, 0, 1, 0], [0, 1, 0, 1]])
K = np.array([[1, 0, 1, 0], [0, 1, 0, 1]])
V = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])

# Run Attention
attention_weights, output = scaled_dot_product_attention(Q, K, V)

# Print Results
print("Attention Weights:\n", attention_weights)
print("\nFinal Output:\n", output)
